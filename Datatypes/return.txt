#return -- functions always have to return something when they don't return anything then it automatically returns non
#function modifys something in a program or returns something
#fucntion should do one thing really well.. it should return something -- name it well -- if you return something you can assign the return value to a variable and use it later in the program!!

def sum(num1, num2):
  print('hiiiiii')    #modifies --- prints
  return num1 + num2  #returns --- I want you to exit this funciton and return whatever I am asking here
print(sum(10,5))

print('------------------------')

def sum(num1, num2):
  return num1 + num2  

total = sum(10,5)
print(sum(10,total))

print('------------------------')

def sum(num1, num2):
  return num1 + num2  

print(sum(10,sum(10,5)))

print('------------------------')

#nested functions but have to be careful that it returns something to ensure it doesn't return None

#return keyword automatically exits the function -- so as soon as we exited 

def sum(num1, num2):
  #when we see another funciton coming up we know what it is -- it looks like this but we are not running this -- its only being defined
  def another_func(n1, n2):
    return n1 + n2  
  return another_func(num1,num2)

total = sum(10,20)
print(total)

[1,2,3].clear() #none clears all items in the existing list and returns none

