#sets -- unordered collections of unique objects -- no duplicated -- values stored in different locations of memory but because all values are unique it is able to recall the set

my_set = {1,2,3,4,5}
your_set = {4,5,6,7,8,9,10}

#my_set.add(2) #no dups

print(my_set)

#my_list = [1,2,3,4,5,5,6]
#print(set(my_list)) #convert a list to a set to remove duplicates

#print(my_set[0]) #can't find it by index

print(2 in my_set) #check if item is in set

print(len(my_set)) #only count unique values

#new_set = my_set.copy()


#.difference() === compare two sets
print(my_set.difference(your_set))

#.discard 
#print(my_set.discard(5))
#print(my_set)

#differenceupdate -- remove all element in my_set from your_set

#print(my_set.difference_update(your_set))
#print(my_set)

#.intersection() -- commonalities between the two sets

#print(my_set.intersection(your_set))

#.disjoint -- is there any overlap true or false

#print(my_set.isdisjoint(your_set))

#union --- creates a new set with both sets combined
#print(my_set.union(your_set))
#print(my_set | your_set))

#.issubset
print(my_set.issubset(your_set))

#.issuperset
print(your_set.issuperset(my_set))