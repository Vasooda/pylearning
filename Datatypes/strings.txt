#strings -- are an ordered sequence of characters 

print(str ('hello my name is vasooda'))

#type
print(type("hello my name is vasooda kumar"))

username = 'supercoder'
password = 'supersecret'

#long string use '''
long_string = '''
WOW
0 0 
---
'''
print(long_string)

first_name = 'Vasooda'
last_name = 'Kumar'

full_name = first_name  + ' ' + last_name

print(full_name)

#string concatenation

print('hello' + ' 5')

#type conversion
print(type(int(str(100))))

a = str(100)
b = int(a)
c = type(b)

#Escape Sequence used to deal with quotes or formatting within text

#weather = "It's "kind of" Sunny"

weather_two = "\t It\'s \"kind of\" \n sunny"

#\ -- what comes after this is a string
#\t -- add a tab after this

#\n --- add a new line

print(weather_two)




name ='Johnny'
age = 55

print('hi ' + name + '. You are ' + str(age) + ' years old')

#formatted strings #1 ** this is the best way to format a string
print(f'hi {name}. You are {age} years old')

#formatted strings #2
print('hi {}. You are {} years old'.format('Johnny', '55'))

#formatted strings #2
print('hi {0}. You are {1} years old'.format(name,age))

#formatted strings #3
print('hi {new_name}. You are {age} years old'.format(new_name='sally',age=100))

#One of the most useful things you can do with a string is access different part of the string with its index


selfish = '01234567'
          #01234567
print(selfish[0])

# [start:stop]
print(selfish[0:8])

#string slicing

#[start:stop:stepover]
print(selfish[0:8:3])

#[start:stop:stepover] negative index means start at the end
print(selfish[-1])

#[start:stop:stepover] reverses the string
print(selfish[::-2])

#immutability -- string are immutable you can't reassign a part of string so they can't be changed they only way to change it is to reassign the value and not use the original string anymore

selfish = '01234567'

selfish = selfish + '8' #this reassigned the original value of selfish "01234567" with new value that includes 8 --> "012345678"

print(selfish)  

#Built in Funcitons

quote = 'to be or not to be'
print(len(quote[0:len(quote)]))

#medthods are similar to functions but owned by something -- i.e. string methods that are specific to strings
#.format() #<---- this is a method

print(quote.upper())

#print(quote.captalize())

print(quote.find('be')) 

print(quote.replace('be', 'me'))

print(quote) # <--- string are immutable so we can't change them that's why using .replace method doesn't change the string only creates a new string