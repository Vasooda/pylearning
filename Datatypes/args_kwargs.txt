#methods vs. functions

#methods required us to use .notation --- it has to be owned by something whatever is to the left of the . -- built in objects that have methods such as string

def some_random_stuff():
  pass

some_random_stuff()


#docstrings

def test(a):
  ''' #allows us to comment inside our function as as typing it will have a short description i.e docstring
  this function test and print parameter a
  '''
  print(a)

test('!!!')
help(test) #provides doc string and deatils that add comments and definitions

print(test.__doc__)

#clean code

#good
def is_odd_or_even(num):
    if num % 2 == 0: # remainder will always be zero when you do modulus 2 for even number
      return True
    elif num % 2 != 0:
      return False

print(is_odd_or_even(51))

#great
def is_even(num):
    if num % 2 == 0: # remainder will always be zero when you do modulus 2 for even number
      return True
    return False

print(is_even(51))

#best!!! (advanced)
def is_even(num):
    return num % 2 == 0
  
print(is_even(51))


# *args **kwargs

# *args allows you to accept any number of arguments 
def super_func(*args):
  print(args)
  return sum(args)

print(super_func(1,2,3,4,5))



def super_func(*args, **kwargs):
  total = 0
  for items in kwargs.values():
    total += items
  return sum(args) + total

print(super_func(1,2,3,4,5, num1=5,num2=10))

#order -- typically you use at most two arguments this is the order to follow
#rule: params, *args, default parameters, **kwargs 
