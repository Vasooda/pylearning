#loops -- allows us to run line of code over and over 

#iterable is something that can be looped over in this case 'Zero to Mastery' -- this works with string but can also use lists, sets etc. With a for loop you can iternative of anything that has a collection of items

for variable in 'Zero to Mastery':
  print(variable)

for set_variable in {1,2,3}:
  print(set_variable)

for list_variable in ['c','b','a']:
  print(list_variable)

for tuple_variable in (4,5,6):
  print(tuple_variable)

for variable in ['c','b','a']:
  for x in {1,2,3}:
    print(variable,x)


#itarable means that its an object or collection that can be iterated over -- dictionary, list, tuple, set, string -- go one by one to check each item in the collection 

users = {
  'name': 'Golem',
  'age': 5006,
  'can_swim': False
}


print("--------------- 'ways to iterate over dictionaries' ---------------")

#below are methods to iterate over dictionaries 

print("--------------- 'default prints keys' ---------------")
#prints the keys
for item in users:
  print(item)

print("--------------- 'returns key-value pair in a tuple' ---------------")
#get a key value pair in a tuple
for item in users.items():
  print(item)

print("--------------- 'returns key value pair no tuple' ---------------")
#uncouple the key-value pair
for item in users.items():
  key, value = item;
  print(key,value)

#better and faster way to return key-value*********
for key, value in users.items():
  print(key,value)


print("--------------- 'returns values of the dictionary' ---------------")
#gives us the values of the dictionary

for item in users.values():
  print(item)

