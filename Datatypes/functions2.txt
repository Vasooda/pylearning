#functions exercise

even = []
def highest_even(li):
  for item in li:
    if item % 2 == 0:
      even.append(item)
  return max(even)

print(highest_even([10,2,3,4,8,11]))
#print(highest_even([10,2,3,4,8,11]))

#walrus operator -- assigns vlaues to variables as part of a larger express


a = 'helllo'

if ((n := len(a)) > 10): 
  print(f"too long {n} elements")


#scope -- what variables do I have access too? 

#total = 100
#print()

#when you create a variable that is not within a function its a global variable 

#scope rules
#1 -- start with local
#2 -- parent local? 
#3 -- global 
#4 -- build in python functions

#global kw --- instead of creating a new variable use can use a global variable 
 
total = 0

def count():
  global total
  total += 1
  return total

count()
print(count())

#dependency injection -- is better than using outside global scope

def count(total):
  total += 1
  return total

count(total)
print(count(count(count(total))))

print('-----------------')


def plusMinus(arr):
    length = len(arr)
    
    posCount = 0
    negCount = 0
    zeroCount = 0
    
    for item in arr:
        if (arr[item]) >= 0: 
          posCount += 1
        elif (arr[item]) < 0:
            negCount += 1
        elif (arr[item]):
            zeroCount += 1
        return(posCount)
            
    print(plusMinus([1,2,3,4,5])
    
  